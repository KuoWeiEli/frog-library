import {Book} from '@/model/book'
import * as db from '@/services/aws/db'
import {Storage} from '@/plugins/amplify'

const bookConverter = function (book) {
    return new Book(
        book.id,
        book.name,
        book.author,
        book.tech,
        book.publisher,
        book.publishDate,
        book.status,
        book.createDate
    )
}

const bookCoverRef = 'images/book_cover/'
const bookService = {
    createBook(book) {
        return new Promise((resolve, reject) => {
            // Step1 get the autogenerated ID after createBook action
            db.mutations(bookConverter(book), 'createBook')
                .then(data => {
                    book.id = data.id

                    // Step2 use the book autogenerated ID as the file key to upload S3
                    Storage.put(bookCoverRef + book.id, book.cover)
                        .then(file => {
                            resolve({data, file})
                        })
                        .catch(err => reject(err))

                })
                .catch(err => reject(err))
        })
    },

    updateBook(book) {
        return new Promise((resolve, reject) => {
            db.mutations(bookConverter(book), 'updateBook')
                .then(data => {
                    if (book.coverChanged)
                        Storage.put(bookCoverRef + book.id, book.cover)
                            .then(file => {
                                resolve({data, file})
                            })
                            .catch(err => reject(err))
                    else
                        resolve({data})
                })
                .catch(err => reject(err))
        })
    },

    deleteBook(id) {
        return new Promise((resolve) => {
            db.mutations({id}, 'deleteBook')
                .then(data => {
                    Storage.remove(bookCoverRef + id)
                        .then(file => {
                            resolve(data, file)
                        })
                        .catch(err => console.log(err))
                })
                .catch(err => console.log(err))
        })
    },

    getAll() {
        return new Promise((resolve, reject) => {
            db.queries('listBooks')
                .then(data => {
                    resolve(data.items)
                })
                .catch(err => reject(err))
        })
    },

    getBookCover(bookID) {
        return new Promise((resolve, reject) => {
            Storage.get(bookCoverRef + bookID)
                .then(url => resolve(url))
                .catch(err => reject(err))
        })
    },

    subscribe(onCreateFn, onUpdateFn, onDeleteFn) {
        if (typeof onCreateFn === 'function')
            db.subscriptions('onCreateBook', (eventData) => onCreateFn(eventData.value.data.onCreateBook))
        if (typeof onUpdateFn === 'function')
            db.subscriptions('onUpdateBook', (eventData) => onUpdateFn(eventData.value.data.onUpdateBook))
        if (typeof onDeleteFn === 'function')
            db.subscriptions('onDeleteBook', (eventData) => onDeleteFn(eventData.value.data.onDeleteBook))
    }
}

export default bookService