import {Book} from '@/model/book'
import * as db from '@/services/aws/db'
import {Storage} from '@/plugins/amplify'

const bookConverter = function (book) {
    return new Book(
        book.id,
        book.name,
        book.author,
        book.tech,
        book.publisher,
        book.publishDate,
        book.status,
        book.createDate
    )
}

const bookCoverRef = 'images/book_cover/'
const bookService = {
    createBook(book) {
        return new Promise((resolve, reject) => {
            // Step1 get the autogenerated ID after createBook action
            db.mutations(bookConverter(book), 'createBook')
                .then(data => {
                    book.id = data.id

                    // Step2 use the book autogenerated ID as the file key to upload S3
                    Storage.put(bookCoverRef + book.id, book.cover)
                        .then(file => {
                            resolve({data, file})
                        })
                        .catch(reject)

                })
                .catch(reject)
        })
    },

    updateBook(book) {
        return new Promise((resolve, reject) => {
            db.mutations(bookConverter(book), 'updateBook')
                .then(data => {
                    if (book.coverChanged)
                        Storage.put(bookCoverRef + book.id, book.cover)
                            .then(file => {
                                resolve({data, file})
                            })
                            .catch(reject)
                    else
                        resolve({data})
                })
                .catch(reject)
        })
    },

    deleteBook(id) {
        return new Promise((resolve, reject) => {
            db.mutations({id}, 'deleteBook')
                .then(data => {
                    Storage.remove(bookCoverRef + id)
                        .then(file => {
                            resolve(data, file)
                        })
                        .catch(reject)
                })
                .catch(reject)
        })
    },

    getAll() {
        return new Promise((resolve, reject) => {
            db.queries('listBooks')
                .then(data => {
                    resolve(data.items)
                })
                .catch(reject)
        })
    },

    // 首頁展示新書入庫為選擇最新入庫時間的書
    getBooksForCarousels() {
        return new Promise((resolve, reject) => {
            // Step1 先取得最新一筆的入庫時間
            db.queries("bookByStatus",
                {
                    status: 'N', // 新書入庫狀態皆假設為可正常供閱
                    limit: 1,
                    sortDirection: 'DESC'
                })
                .then(firstBookData => {
                    // Step2 利用其時間查詢相同一批入庫的書籍
                    let filter = {
                        createDate: {
                            eq: firstBookData.items[0].createDate
                        }
                    }

                    db.queries("listBooks", {filter})
                        .then(data => {
                            // Step3 取得這批書籍的封面檔案
                            Promise.all(data
                                .items
                                .map(e => e.id)
                                .map(this.getBookCover))
                                .then(urls => {
                                    data.items
                                        .forEach((item, index)=> {
                                            item.coverUrl = urls[index]
                                        })
                                    resolve(data.items)
                                })
                                .catch(reject)
                        })
                        .catch(reject)
                })
                .catch(reject)
        })
    },

    getBookCover(bookID) {
        return new Promise((resolve, reject) => {
            Storage.get(bookCoverRef + bookID)
                .then(resolve)
                .catch(reject)
        })
    },

    subscribe(onCreateFn, onUpdateFn, onDeleteFn) {
        if (typeof onCreateFn === 'function')
            db.subscriptions('onCreateBook', (eventData) => onCreateFn(eventData.value.data.onCreateBook))
        if (typeof onUpdateFn === 'function')
            db.subscriptions('onUpdateBook', (eventData) => onUpdateFn(eventData.value.data.onUpdateBook))
        if (typeof onDeleteFn === 'function')
            db.subscriptions('onDeleteBook', (eventData) => onDeleteFn(eventData.value.data.onDeleteBook))
    }
}

export default bookService