import { Reservation } from '@/model/reservation'
import * as db from '@/services/aws/db'

const reservationConverter = function (reservation) {
    return new Reservation(
        reservation.id,
        reservation.applyDate,
        reservation.reservationDate,
        reservation.dueDate,
        reservation.verifyDate,
        reservation.takeDate,
        reservation.returnDate,
        reservation.status,
        reservation.userID,
        reservation.bookID,
    )
}

const reservationService = {
    createReservation(reservation) {
        return new Promise((resolve, reject) => {
            // Step1 get the autogenerated ID after createBook action
            db.mutations(reservationConverter(reservation), 'createReservation')
                .then(resolve)
                .catch(reject)
        })
    },

    updateReservation(reservation) {
        return new Promise((resolve, reject) => {
            db.mutations(reservationConverter(reservation), 'updateReservation')
                .then(resolve)
                .catch(reject)
        })
    },

    deleteReservation(id) {
        return new Promise((resolve, reject) => {
            db.mutations({id}, 'deleteReservation')
                .then(resolve)
                .catch(reject)
        })
    },

    getAll() {
        return new Promise((resolve, reject) => {
            db.queries('listReservations')
                .then(data => {
                    resolve(data.items)
                })
                .catch(reject)
        })
    },

    subscribe(onCreateFn, onUpdateFn, onDeleteFn) {
        if (typeof onCreateFn === 'function')
            db.subscriptions('onCreateReservation', (eventData) => onCreateFn(eventData.value.data.onCreateReservation))
        if (typeof onUpdateFn === 'function')
            db.subscriptions('onUpdateReservation', (eventData) => onUpdateFn(eventData.value.data.onUpdateReservation))
        if (typeof onDeleteFn === 'function')
            db.subscriptions('onDeleteReservation', (eventData) => onDeleteFn(eventData.value.data.onDeleteReservation))
    }
}

export default reservationService