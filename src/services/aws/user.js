import {User} from '@/model/user'
import * as db from '@/services/aws/db'
import {Storage} from '@/plugins/amplify'

const userConverter = function (user) {
    return new User(
        user.id,
        user.email,
        user.empid,
        user.nameTW,
        user.nameEN,
        user.status,
    )
}

const userAvatarRef = 'images/user_avatar/'
const userService = {
    getUserAndAvatar(id) {
        return new Promise((resolve, reject) => {
            Promise.all([this.getUser(id), this.getUserAvatar(id)])
                .then(result => {
                    let user = result[0]
                    user.avatar = result[1]
                    resolve(user)
                })
                .catch(reject)
        })
    },
    getUser(id) {
        return new Promise((resolve, reject) => {
            db.queries('getUser', {id})
                .then(resolve)
                .catch(reject)
        })
    },
    createUser(user) {
        return new Promise((resolve, reject) => {
            // Step1 get the autogenerated ID after createUser action
            db.mutations(userConverter(user), 'createUser')
                .then(data => {
                    user.id = data.id

                    // Step2 use the user autogenerated ID as the file key to upload S3
                    Storage.put(userAvatarRef + user.id, user.avatar)
                        .then(() => {
                            // Step3 get avatar url and combine into a user object
                            this.getUserAvatar(user.id)
                                .then(url => {
                                    data.avatar = url
                                    resolve(data)
                                })
                                .catch(reject)
                        })
                        .catch(reject)

                })
                .catch(reject)
        })
    },

    updateUser(user) {
        return new Promise((resolve, reject) => {
            db.mutations(userConverter(user), 'updateUser')
                .then(data => {
                    if (user.avatarChanged)
                        Storage.put(userAvatarRef + user.id, user.avatar)
                            .then(file => {
                                resolve({data, file})
                            })
                            .catch(reject)
                    else
                        resolve({data})
                })
                .catch(reject)
        })
    },

    deleteUser(id) {
        return new Promise((resolve, reject) => {
            db.mutations({id}, 'deleteUser')
                .then(data => {
                    Storage.remove(userAvatarRef + id)
                        .then(file => {
                            resolve(data, file)
                        })
                        .catch(reject)
                })
                .catch(reject)
        })
    },

    getAll() {
        return new Promise((resolve, reject) => {
            db.queries('listUsers')
                .then(data => {
                    resolve(data.items)
                })
                .catch(reject)
        })
    },

    getUserAvatar(userID) {
        return new Promise((resolve, reject) => {
            Storage.get(userAvatarRef + userID)
                .then(resolve)
                .catch(reject)
        })
    },

    subscribe(onCreateFn, onUpdateFn, onDeleteFn) {
        if (typeof onCreateFn === 'function')
            db.subscriptions('onCreateUser', (eventData) => onCreateFn(eventData.value.data.onCreateUser))
        if (typeof onUpdateFn === 'function')
            db.subscriptions('onUpdateUser', (eventData) => onUpdateFn(eventData.value.data.onUpdateUser))
        if (typeof onDeleteFn === 'function')
            db.subscriptions('onDeleteUser', (eventData) => onDeleteFn(eventData.value.data.onDeleteUser))
    }
}

export default userService